{
  "version": 3,
  "sources": ["../../src/lib/ami.ts"],
  "sourcesContent": ["/* eslint-disable jsdoc/require-jsdoc */\nimport AsteriskManagerGlobal from 'asterisk-manager';\nimport * as tools from './tools';\n\n/**\n * Interface options\n */\nexport interface ioptions {\n    port: string;\n    hostname: string;\n    username: string;\n    password: string;\n    events: boolean;\n    service?: string;\n}\n\nexport interface amaoptions {\n    action: string;\n    channel: string;\n    context: string;\n    exten: string;\n    priority: string;\n    actionid: string;\n    timeout: number;\n    variable: {\n        repeat: number;\n        file: string;\n        del: string;\n    };\n    async?: string;\n    callerid?: string;\n}\n\n/**\n * Asterix Manager Class. More Infos:\n * https://github.com/pipobscure/NodeJS-AsteriskManager\n * https://github.com/mscdex/node-asterisk\n *\n */\nexport class AsteriskManager {\n    ami: any;\n    options: ioptions;\n\n    constructor(options: any) {\n        this.options = {\n            port: options.port,\n            hostname: options.hostname,\n            username: options.username,\n            password: options.password,\n            service: options.service || 'sip',\n            events: options.events || false,\n        };\n        this.ami = new AsteriskManagerGlobal(\n            this.options.port,\n            this.options.hostname,\n            this.options.username,\n            this.options.password,\n            this.options.events,\n        );\n    }\n\n    /**\n     * Get AMI instance\n     *\n     * @returns AMI insatnce\n     */\n    public getAmi(): any {\n        return this.ami;\n    }\n\n    /**\n     * Eventhandler for asterisk class\n     *\n     * @param eventname name of event\n     * @param callback callback function\n     */\n    public on(eventname: string, callback: any): void {\n        if (eventname.length > 0 && callback) {\n            this.ami.on(eventname, (evt: any) => {\n                if (callback) {\n                    callback(evt);\n                }\n            });\n        }\n    }\n\n    /**\n     * Connected to AMI\n     *\n     * @returns if connected then true else false\n     */\n    public isConnected(): boolean {\n        return this.ami.isConnected();\n    }\n\n    /**\n     * Connect to AMI\n     *\n     * @param callback callback\n     */\n    public connect(callback: any): void {\n        this.ami.connect(this.options.port, this.options.hostname, callback);\n    }\n\n    /**\n     * Connect to AMI async\n     *\n     * @returns void\n     */\n    public async connectAsync(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.ami.connect(this.options.port, this.options.hostname, () => {\n                resolve();\n            });\n            reject(new Error('Could not connect to asterisk!'));\n        });\n    }\n\n    /**\n     * disconnect from AMI\n     *\n     * @param callback callback function\n     */\n    public disconnect(callback: any): void {\n        this.ami.disconnect(callback);\n    }\n\n    /**\n     * disconnect from AMI\n     *\n     * @returns void\n     */\n    public async disconnectAsync(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.ami.disconnect(() => {\n                resolve();\n            });\n            reject(new Error('Could not disconnect!'));\n        });\n    }\n\n    /**\n     * keep connected to AMI\n     */\n    public keepConnected(): void {\n        this.ami.keepConnected();\n    }\n\n    /**\n     * login to AMI\n     *\n     * @param callback callback function\n     */\n    public login(callback: any): void {\n        this.ami.login(callback);\n    }\n\n    /**\n     * login to AMI async\n     *\n     * @returns void\n     */\n    public async loginAsync(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.ami.login(() => {\n                resolve();\n            });\n            reject(new Error('Could not login!'));\n        });\n    }\n\n    /**\n     * reconnect to AMI\n     *\n     * @param callback callback function\n     */\n    public reconnect(callback: any): void {\n        if (!this.isConnected()) {\n            this.connect(() => {\n                this.login(callback);\n            });\n        } else {\n            if (callback) {\n                callback();\n            }\n        }\n    }\n\n    /**\n     * reconnect to AMI async\n     */\n    public async reconnectAsync(): Promise<void> {\n        if (!this.isConnected()) {\n            await this.connectAsync();\n        }\n    }\n\n    /**\n     * Dial\n     *\n     * @param parameter dial parameter\n     * @param callback callback function\n     * @returns the result of the dial\n     */\n    public dial(parameter: any, callback: any): any {\n        if (!parameter) {\n            return;\n        }\n        const telnrs = typeof parameter.telnr === 'string' ? Array(parameter.telnr) : parameter.telnr;\n        const extension = parameter.extension || 'none';\n        const resultarray: any = [];\n        for (const i in telnrs) {\n            const telnr = tools.textToNumber(telnrs[i]);\n            let channel;\n            if (this.options.service === 'pjsip') {\n                channel = extension === 'none' ? `PJSIP/${telnr}` : `PJSIP/${telnr}@${extension}`;\n            } else {\n                channel = extension === 'none' ? `SIP/${telnr}` : `SIP/${extension}/${telnr}`;\n            }\n            const guid = tools.getGuid();\n            const options: amaoptions = {\n                action: 'originate',\n                channel: channel,\n                context: parameter.context || 'ael-ansage',\n                exten: parameter.exten || telnr,\n                priority: parameter.priority || 1,\n                actionid: guid,\n                timeout: parameter.timeout || 60 * 1000,\n                variable: {\n                    repeat: parameter.repeat || 5,\n                    file: parameter.audiofile,\n                    del: parameter.delete || '',\n                },\n            };\n\n            if (Object.prototype.hasOwnProperty.call(parameter, 'async')) {\n                options.async = parameter.async;\n            }\n            if (Object.prototype.hasOwnProperty.call(parameter, 'callerid')) {\n                options.callerid = tools.textToNumber(parameter.callerid);\n            }\n            if (Object.prototype.hasOwnProperty.call(parameter, 'variable')) {\n                options.variable = parameter.variable;\n            }\n            this.ami.action(options, (err: any, res: any) => {\n                const result = {\n                    parameter: parameter,\n                    options: options,\n                    guid: guid,\n                    result: res,\n                };\n                resultarray.push(result);\n                callback && callback(err, result);\n            });\n        }\n        return resultarray;\n    }\n\n    /**\n     * Dial async\n     *\n     * @param parameter dial parameter\n     * @returns the result of the dial\n     */\n    public async dialAsync(parameter: any): Promise<any> {\n        if (!parameter) {\n            return;\n        }\n        const telnrs = typeof parameter.telnr === 'string' ? Array(parameter.telnr) : parameter.telnr;\n        const extension = parameter.extension || 'none';\n        const resultarray: any = [];\n        for (const i in telnrs) {\n            const telnr = tools.textToNumber(telnrs[i]);\n            let channel;\n            if (this.options.service === 'pjsip') {\n                channel = extension === 'none' ? `PJSIP/${telnr}` : `PJSIP/${telnr}@${extension}`;\n            } else {\n                channel = extension === 'none' ? `SIP/${telnr}` : `SIP/${extension}/${telnr}`;\n            }\n            const guid = tools.getGuid();\n            const options: any = {\n                action: 'originate',\n                channel: channel,\n                context: parameter.context || 'ael-ansage',\n                exten: parameter.exten || telnr,\n                priority: parameter.priority || 1,\n                actionid: guid,\n                timeout: parameter.timeout || 60 * 1000,\n                variable: {\n                    repeat: parameter.repeat || 5,\n                    file: parameter.audiofile,\n                    del: parameter.delete || '',\n                },\n            };\n\n            if (Object.prototype.hasOwnProperty.call(parameter, 'async')) {\n                options.async = parameter.async;\n            }\n            if (Object.prototype.hasOwnProperty.call(parameter, 'callerid')) {\n                options.callerid = tools.textToNumber(parameter.callerid);\n            }\n            if (Object.prototype.hasOwnProperty.call(parameter, 'variable')) {\n                options.variable = parameter.variable;\n            }\n            const result = await this.actionAsync(options);\n            resultarray.push(result);\n        }\n        return resultarray;\n    }\n\n    /**\n     * AMI action\n     *\n     * @param parameter dial parameter\n     * @param callback callback function\n     */\n    public action(parameter: Record<string, string> & { action: string }, callback: any): void {\n        const guid = tools.getGuid();\n        this.ami.action(parameter, (err: any, res: any) => {\n            const result = {\n                parameter: parameter,\n                guid: guid,\n                result: res,\n            };\n            callback && callback(err, result);\n        });\n    }\n\n    /**\n     * AMI action async\n     *\n     * @param parameter dial parameter\n     * @returns result of aciton\n     */\n    public async actionAsync(\n        parameter: Record<string, string> & { action: string },\n    ): Promise<{ parameter: Record<string, string> & { action: string }; guid: string; result: any }> {\n        return new Promise((resolve, reject) => {\n            const guid = tools.getGuid();\n            this.ami.action(parameter, (err: any, res: any) => {\n                if (err) {\n                    reject(new Error(`Error excuting action ${err.message}`));\n                }\n                const result = {\n                    parameter: parameter,\n                    guid: guid,\n                    result: res,\n                };\n                resolve(result);\n            });\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["AsteriskManagerGlobal"]
}
