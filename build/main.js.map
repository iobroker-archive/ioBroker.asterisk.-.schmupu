{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport * as fs from 'fs';\nimport path from 'node:path';\nimport { AsteriskManager } from './lib/ami';\nimport * as tools from './lib/tools';\nimport { TextToGSMConverter } from './lib/transcode';\n\ninterface audiotextparamater {\n    text?: string;\n    audiofile?: string;\n    language?: string;\n}\n\ninterface dialparameter {\n    callerid: string;\n    telnr: string;\n    text?: string;\n    audiofile?: string;\n    language?: string;\n    delete?: string;\n    extension?: string;\n}\n\nclass asterisk extends utils.Adapter {\n    private onlineCheckAvailable: boolean;\n    private onlineCheckTimeout: ReturnType<typeof this.setTimeout>;\n    private sshconfig: tools.sshconfig;\n    private configfiles: string[];\n    private asterisk: AsteriskManager | undefined;\n    private tmppath: string;\n    private timeouthandler: ioBroker.Timeout | undefined;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'asterisk',\n        });\n        this.configfiles = [\n            'pjsip_telekom.conf.template',\n            'pjsip_fritzbox.conf.template',\n            'pjsip_sipgate.conf.template',\n            'sip_fritzbox.conf.template',\n            'extensions.ael.template',\n            'manager.conf.template',\n            'rtp.conf.template',\n        ];\n        this.tmppath = tools.isWindow() ? tools.addSlashToPath('c:\\\\temp\\\\') : tools.addSlashToPath('/tmp/');\n        this.onlineCheckAvailable = false;\n        this.onlineCheckTimeout = undefined;\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // await tools.wait(10);\n        await this.setState('info.connection', { val: true, ack: true });\n        this.subscribeStates('*');\n        this.log.info(\n            `Starting Adapter ${this.namespace} in version ${this.version} with transcoder ${\n                this.config.transcoder\n            } and language ${this.config.language}`,\n        );\n        this.sshconfig = {\n            host: this.config.ip,\n            username: this.config.sshuser,\n            port: this.config.sshport,\n            password: this.config.sshpassword,\n            tryKeyboard: true,\n            onKeyboardInteractive: (\n                name: any,\n                instructions: any,\n                instructionsLang: any,\n                prompts: string | any[],\n                finish: (arg0: any[]) => void,\n            ) => {\n                if (prompts.length > 0 && prompts[0].prompt.toLowerCase().includes('password')) {\n                    finish([this.config.sshpassword]);\n                }\n            },\n        };\n        try {\n            await this.createConfigFiles();\n            await this.initStates();\n            await this.startAsterisk();\n        } catch (err) {\n            this.log.error(`Error: ${tools.getErrorMessage(err)}`);\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback calback function\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.log.info(`Stopping asterisk processes, please wait!`);\n            await this.asteriskDisconnect();\n            await this.setState('info.connection', { val: false, ack: true });\n            callback();\n        } catch (err) {\n            this.log.error(`Error: ${tools.getErrorMessage(err)}`);\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed object changes\n     *\n     * @param id id of the object\n     * @param obj object\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private async onObjectChange(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n        // const asterisk = await Lupus.getInstance(this);\n        // await asterisk.onObjectChange(id, obj);\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id id of state\n     * @param state state\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state && !state.ack) {\n            const stateId = id.replace(`${this.namespace}.`, '');\n            this.log.debug(`Call of onStateChange for ${stateId}: ${JSON.stringify(state)}`);\n            if (stateId === 'dialin.create') {\n                const text = (await this.getStateAsync('dialin.text'))?.val?.toString() || '';\n                const language = (await this.getStateAsync('dialin.language'))?.val?.toString() || this.config.language;\n                try {\n                    await this.createDialInFile({ text: text, language: language });\n                    await this.setStateChangedAsync('dialin.create', { ack: true });\n                    await this.setStateChangedAsync('dialin.text', { ack: true });\n                    await this.setStateChangedAsync('dialin.language', { ack: true });\n                } catch (err) {\n                    this.log.error(`Error in onStateChange: ${stateId}:  ${tools.getErrorMessage(err)}`);\n                }\n            }\n            if (stateId === 'dialout.call') {\n                const parameter: dialparameter = {\n                    callerid: (await this.getStateAsync('dialout.callerid'))?.val?.toString() || '',\n                    text: (await this.getStateAsync('dialout.text'))?.val?.toString() || '',\n                    telnr: (await this.getStateAsync('dialout.telnr'))?.val?.toString() || '',\n                    language: (await this.getStateAsync('dialout.language'))?.val?.toString() || this.config.language,\n                };\n                try {\n                    await this.asteriskConnect();\n                    await this.asteriskDial(parameter);\n                    await this.setStateChangedAsync('dialout.call', { ack: true });\n                    await this.setStateChangedAsync('dialout.callerid', { ack: true });\n                    await this.setStateChangedAsync('dialout.telnr', { ack: true });\n                    await this.setStateChangedAsync('dialout.text', { ack: true });\n                    await this.setStateChangedAsync('dialout.language', { ack: true });\n                } catch (err) {\n                    this.log.error(`Error in onStateChange: ${stateId}:  ${tools.getErrorMessage(err)}`);\n                }\n            }\n        }\n    }\n\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     *\n     * @param obj object\n     */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            switch (obj.command) {\n                case 'dial': {\n                    const parameter: dialparameter = obj.message;\n                    try {\n                        await this.asteriskConnect();\n                        const result = await this.asteriskDial(parameter);\n                        /*\n                        await this.setState('dialout.telnr', { val: parameter?.telnr || '', ack: true });\n                        await this.setState('dialout.text', { val: parameter?.text || '', ack: true });\n                        await this.setState('dialout.callerid', { val: parameter?.callerid || '', ack: true });\n                        */\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, { result: result, error: undefined }, obj.callback);\n                        }\n                    } catch (err) {\n                        this.sendTo(\n                            obj.from,\n                            obj.command,\n                            { result: undefined, error: tools.getErrorMessage(err) },\n                            obj.callback,\n                        );\n                        this.log.error(`Error in onMessage for cammnd ${obj.command}: ${tools.getErrorMessage(err)}`);\n                    }\n                    break;\n                }\n                case 'action': {\n                    const parameter: any = obj.message?.parameter;\n                    const atoptions: audiotextparamater = obj.message?.at;\n                    try {\n                        await this.asteriskConnect();\n                        const result = await this.asteriskAction(parameter, atoptions);\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, { result: result, error: undefined }, obj.callback);\n                        }\n                    } catch (err) {\n                        this.sendTo(\n                            obj.from,\n                            obj.command,\n                            { result: undefined, error: tools.getErrorMessage(err) },\n                            obj.callback,\n                        );\n                        this.log.error(`Error in onMessage for cammnd ${obj.command}: ${tools.getErrorMessage(err)}`);\n                    }\n                    break;\n                }\n                case 'dialin': {\n                    const atoptions: audiotextparamater = obj.message;\n                    try {\n                        const language = atoptions?.language ? atoptions?.language : this.config.language;\n                        const text = atoptions.text;\n                        const audiofile = atoptions.audiofile;\n                        await this.createDialInFile({ text: text, audiofile: audiofile, language: language });\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, { result: true, error: undefined }, obj.callback);\n                        }\n                    } catch (err) {\n                        this.sendTo(\n                            obj.from,\n                            obj.command,\n                            { result: false, error: tools.getErrorMessage(err) },\n                            obj.callback,\n                        );\n                        this.log.error(`Error in onMessage for cammnd ${obj.command}: ${tools.getErrorMessage(err)}`);\n                    }\n                    break;\n                }\n                default:\n                    this.log.error(`Unknown comannd ${obj.command} in onMessage`);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Init States\n     */\n    private async initStates(): Promise<void> {\n        this.log.debug(`Init default States`);\n        const dialin_text =\n            (await this.getStateAsync('dialin.text'))?.val?.toString() ||\n            'Please enter after the beep tone your passwort and press hashtag.';\n        const dialout_text =\n            (await this.getStateAsync('dialout.text'))?.val?.toString() ||\n            'Please enter after the beep tone your passwort and press hashtag.';\n        const dialin_language = (await this.getStateAsync('dialin.language'))?.val?.toString() || this.config.language;\n        const dialout_language =\n            (await this.getStateAsync('dialout.language'))?.val?.toString() || this.config.language;\n        await this.setStateChangedAsync('dialout.language', { val: dialout_language, ack: true });\n        await this.setStateChangedAsync('dialin.language', { val: dialin_language, ack: true });\n        await this.setStateChangedAsync('dialout.text', { val: dialout_text, ack: true });\n        await this.setStateChangedAsync('dialin.text', { val: dialin_text, ack: true });\n        await this.createDialInFile({ text: dialin_text, language: dialin_language });\n    }\n\n    /**\n     * create a gsm audiofile in tmp path from text or other audiofile in gsm or mp3 mode\n     *\n     * @param atoptions options like text, audio and language\n     * @param atoptions.text text (optional)\n     * @param atoptions.audiofile aufdiofile in gsm or mp3 format (optional)\n     * @param atoptions.language language (optional)\n     * @returns the filename of the gsm file\n     */\n    private async getGuidGsmFile(atoptions: audiotextparamater): Promise<string> {\n        this.log.debug(`Starting getGuidGsmFile`);\n        const tmppath = this.tmppath;\n        const guid = tools.getGuid();\n        const audiofile_guid_gsm = `${tmppath}audio_${guid}.gsm`;\n        const language = atoptions.language ? atoptions.language : this.config.language;\n        if (!atoptions.audiofile && !atoptions.text) {\n            throw new Error(`Text or audiofile are missing!`);\n        }\n        if (atoptions.audiofile && atoptions.text) {\n            throw new Error(`Text or audiofile, but not both!`);\n        }\n        const converter = new TextToGSMConverter({\n            transcoder: this.config.transcoder,\n            language: language,\n        });\n        if (atoptions.text) {\n            await converter.textToGsm(atoptions.text, audiofile_guid_gsm);\n        }\n        if (atoptions.audiofile) {\n            switch (path.extname(atoptions.audiofile).toLowerCase()) {\n                case '.mp3':\n                    await converter.mp3ToGsm(atoptions.audiofile, audiofile_guid_gsm);\n                    break;\n                case '.gsm':\n                    fs.copyFileSync(atoptions.audiofile, audiofile_guid_gsm);\n                    break;\n                default:\n                    throw new Error(`Audiofile ${atoptions.audiofile} must have ending .mp3 or .gsm`);\n            }\n        }\n        if (!fs.existsSync(audiofile_guid_gsm)) {\n            throw new Error(`Could not find the file ${audiofile_guid_gsm}`);\n        }\n        return audiofile_guid_gsm;\n    }\n\n    /**\n     * Create Config Files\n     *\n     * @returns void\n     */\n    private async createConfigFiles(): Promise<void> {\n        this.log.debug(`Starting createConfigFiles`);\n        if (!this.config.forceReInit) {\n            return;\n        }\n        const config: any = this.config;\n        config.sipusercountry = `+49${config.sipuser.slice(1)}`;\n        try {\n            for (const file of this.configfiles) {\n                if (!file.startsWith(this.config.service) && file.match(/^(sip|pjsip)/)) {\n                    continue;\n                }\n                const tmppath = this.tmppath;\n                const srcfile = tools.isWindow()\n                    ? `${this.adapterDir}\\\\template\\\\${file}`\n                    : `${this.adapterDir}/template/${file}`;\n                const dstfile = `${tmppath}${file.replace('.template', '')}`;\n                this.log.debug(`Read file ${srcfile}`);\n                let dstcontent = fs.readFileSync(srcfile, { encoding: 'utf8' });\n                for (const i in config) {\n                    const search = `\\${${i}}`;\n                    const value = config[i];\n                    dstcontent = dstcontent.split(search).join(value);\n                }\n                this.log.debug(`Write config file ${dstfile}`);\n                fs.writeFileSync(dstfile, dstcontent, { encoding: 'utf8' });\n                if (this.config.ssh) {\n                    this.log.info(\n                        `Transfering Config File: scp ${dstfile} ${this.config.sshuser}@${this.config.ip}:${dstfile}`,\n                    );\n                    await tools.sendSSH(dstfile, dstfile, this.sshconfig);\n                    this.log.info(\n                        `Create config file ${dstfile} on server ${this.config.ip} for asterisk. Please rename it and move it to /etc/asterisk/`,\n                    );\n                    this.log.debug(`Delete file ${dstfile}`);\n                    fs.unlinkSync(dstfile);\n                } else {\n                    this.log.info(\n                        `Create config file ${dstfile} for asterisk. Please rename it and  move it to /etc/asterisk/`,\n                    );\n                }\n            }\n            await this.extendForeignObject(`system.adapter.${this.namespace}`, { native: { forceReInit: false } });\n        } catch (err) {\n            this.log.error(`Error, could not create configfile. ${tools.getErrorMessage(err)}`);\n        }\n    }\n\n    /**\n     * Asterisk action\n     *\n     * @param parameter AMI Paramter\n     * @param atoptions text or audiofile (optional)\n     * @param atoptions.text text (optional)\n     * @param atoptions.audiofile audiofile (optional)\n     * @param atoptions.language language (optional)\n     * @returns result\n     */\n    private async asteriskAction(parameter: any, atoptions?: audiotextparamater): Promise<any> {\n        this.log.debug(`Starting asteriskAction`);\n        if (!this.asterisk?.isConnected()) {\n            throw new Error(`No connection to Asterisk!`);\n        }\n        const audiofile_guid_gsm = await this.getGuidGsmFile({\n            text: atoptions?.text,\n            audiofile: atoptions?.audiofile,\n            language: atoptions?.language,\n        });\n        if (this.config.ssh) {\n            const audiofile_ssh_gsm = tools.addSlashToPath(this.config.path) + path.basename(audiofile_guid_gsm);\n            this.log.debug(`scp ${audiofile_guid_gsm} ${this.config.sshuser}@${this.config.ip}:${audiofile_ssh_gsm}`);\n            await tools.sendSSH(audiofile_guid_gsm, audiofile_ssh_gsm, this.sshconfig);\n            this.log.debug(`Delete file ${audiofile_guid_gsm}`);\n            fs.unlinkSync(audiofile_guid_gsm);\n            if (parameter.variable) {\n                parameter.variable.file = tools.getFilenameWithoutExtension(audiofile_ssh_gsm);\n                parameter.variable.del = 'delete';\n            } else {\n                parameter.variable = {\n                    file: tools.getFilenameWithoutExtension(audiofile_ssh_gsm),\n                    del: 'delete',\n                };\n            }\n        }\n        if (!this.config.ssh) {\n            const audiofile_local_gsm = tools.addSlashToPath(this.config.path) + path.basename(audiofile_guid_gsm);\n            this.log.debug(`move ${audiofile_guid_gsm} ${audiofile_local_gsm}`);\n            fs.renameSync(audiofile_guid_gsm, audiofile_local_gsm);\n            if (parameter.variable) {\n                parameter.variable.file = tools.getFilenameWithoutExtension(audiofile_local_gsm);\n                parameter.variable.del = 'delete';\n            } else {\n                parameter.variable = {\n                    file: tools.getFilenameWithoutExtension(audiofile_local_gsm),\n                    del: 'delete',\n                };\n            }\n        }\n        this.log.debug(`Message: ${JSON.stringify(parameter)}`);\n        this.log.debug('AMI Command');\n        const result = await this.asterisk.actionAsync(parameter);\n        this.log.debug(`AMI Result : ${JSON.stringify(result)}`);\n        return result;\n    }\n\n    /**\n     * Asterisk Dial\n     *\n     * @param parameter parameter\n     */\n    private async asteriskDial(parameter: dialparameter): Promise<any> {\n        this.log.debug(`Starting asteriskDial`);\n        if (!this.asterisk?.isConnected()) {\n            throw new Error(`No connection to Asterisk!`);\n        }\n        const audiofile_guid_gsm = await this.getGuidGsmFile({\n            text: parameter?.text,\n            audiofile: parameter?.audiofile,\n            language: parameter?.language,\n        });\n        parameter.language = parameter.language ? parameter.language : this.config.language;\n        parameter.extension = parameter.extension ? parameter.extension : this.config.sipuser;\n        if (this.config.ssh) {\n            const audiofile_ssh_gsm = tools.addSlashToPath(this.config.path) + path.basename(audiofile_guid_gsm);\n            this.log.debug(`scp ${audiofile_guid_gsm} ${this.config.sshuser}@${this.config.ip}:${audiofile_ssh_gsm}`);\n            await tools.sendSSH(audiofile_guid_gsm, audiofile_ssh_gsm, this.sshconfig);\n            this.log.debug(`Delete file ${audiofile_guid_gsm}`);\n            fs.unlinkSync(audiofile_guid_gsm);\n            parameter.audiofile = tools.getFilenameWithoutExtension(audiofile_ssh_gsm);\n            parameter.delete = 'delete';\n        }\n        if (!this.config.ssh) {\n            const audiofile_local_gsm = tools.addSlashToPath(this.config.path) + path.basename(audiofile_guid_gsm);\n            this.log.debug(`move ${audiofile_guid_gsm} ${audiofile_local_gsm}`);\n            fs.renameSync(audiofile_guid_gsm, audiofile_local_gsm);\n            parameter.audiofile = tools.getFilenameWithoutExtension(audiofile_local_gsm);\n            parameter.delete = 'delete';\n        }\n        this.log.debug(`Message: ${JSON.stringify(parameter)}`);\n        this.log.debug('AMI Command');\n        const result = await this.asterisk.dialAsync(parameter);\n        this.log.debug(`AMI Result : ${JSON.stringify(result)}`);\n        return result;\n    }\n\n    /**\n     * start Astersisk\n     */\n    private async startAsterisk(): Promise<void> {\n        try {\n            const start = await this.asteriskConnect();\n            if (start) {\n                await this.asteriskAnswerCall();\n            }\n        } catch (err) {\n            this.log.error(`Error: ${tools.getErrorMessage(err)}`);\n        }\n        this.timeouthandler = this.setTimeout(async () => {\n            await this.startAsterisk();\n        }, 10 * 1000);\n    }\n\n    /**\n     * Connect to Asterisk AMI\n     */\n    private async asteriskConnect(): Promise<boolean> {\n        let start = false;\n        if (!this.asterisk) {\n            this.log.debug(`Connect to Asterisk`);\n            this.asterisk = new AsteriskManager({\n                port: this.config.port,\n                hostname: this.config.ip,\n                username: this.config.user,\n                password: this.config.password,\n                service: this.config.service,\n            });\n            start = true;\n        } else {\n            this.log.debug(`Reconnect to Asterisk`);\n            try {\n                await this.asterisk.reconnectAsync();\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (err) {\n                this.log.debug(`Reconnect to Asterisk was not succesfull. Restarting Aseterisk`);\n                try {\n                    await this.asteriskDisconnect();\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                } catch (err) {\n                    /* empty */\n                }\n                this.asterisk = new AsteriskManager({\n                    port: this.config.port,\n                    hostname: this.config.ip,\n                    username: this.config.user,\n                    password: this.config.password,\n                    service: this.config.service,\n                });\n                start = true;\n            }\n        }\n        let count = 0;\n        while (!this.asterisk.isConnected()) {\n            count++;\n            if (count > 1000) {\n                throw new Error(`Could not connect to Asterisk`);\n            }\n            await tools.wait(20 / 1000);\n        }\n        return start;\n    }\n\n    /**\n     * Disconnect from Asterix AMI\n     */\n    private async asteriskDisconnect(): Promise<void> {\n        if (this.asterisk) {\n            this.log.debug(`Disconnecting from Asterisk`);\n            if (this.timeouthandler) {\n                this.clearTimeout(this.timeouthandler);\n            }\n            try {\n                await this.asterisk.disconnectAsync();\n                let count = 0;\n                while (this.asterisk.isConnected()) {\n                    count++;\n                    if (count > 1000) {\n                        throw new Error(`Could not disconnect to Asterisk`);\n                    }\n                    await tools.wait(20 / 1000);\n                }\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (err) {\n                /* empty */\n            }\n        }\n    }\n\n    /**\n     * Answer Asterisk Call\n     */\n    // eslint-disable-next-line @typescript-eslint/require-await\n    private async asteriskAnswerCall(): Promise<void> {\n        this.log.debug(`Starting asteriskAnswerCall`);\n        const vars: { [key: string]: any } = {};\n        this.asterisk?.on('managerevent', async (evt: any) => {\n            this.log.debug(`Management Events ${JSON.stringify(evt)}`);\n            if (evt.event == 'VarSet' && evt.variable) {\n                for (const i in evt.variable) {\n                    if (!vars[i] || vars[i].uniqueid != evt.uniqueid || vars[i].value != evt.value) {\n                        vars[i] = {\n                            uniqueid: evt.uniqueid,\n                            value: evt.value,\n                        };\n                        this.log.debug(`Variable: ${i} = ${evt.value}`);\n                        if (evt.context == 'ael-antwort' && i == 'dtmf' && evt.value != '') {\n                            await this.setState('dialin.callerid', { val: evt.calleridnum, ack: true });\n                            await this.setState('dialin.dtmf', { val: evt.value, ack: true });\n                        }\n                        if (evt.context == 'ael-ansage' && i == 'dtmf' && evt.value != '') {\n                            await this.setState('dialout.dtmf', { val: evt.value, ack: true });\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Create Dial In File\n     *\n     * @param atoptions text, audofile and language\n     * @param atoptions.text text to convert to a gsm file\n     * @param atoptions.audiofile output filename (wiht ending gsm)\n     * @param atoptions.language language\n     */\n    private async createDialInFile(atoptions: audiotextparamater): Promise<void> {\n        this.log.debug(`Starting createDialInFile`);\n        const audiofile_guid_gsm = await this.getGuidGsmFile(atoptions);\n        if (this.config.ssh) {\n            const audiofile_dtmf_gsm = `${tools.addSlashToPath(this.config.path)}asterisk_dtmf.gsm`;\n            this.log.debug(`scp ${audiofile_guid_gsm} ${this.config.sshuser}@${this.config.ip}:${audiofile_dtmf_gsm}`);\n            await tools.sendSSH(audiofile_guid_gsm, audiofile_dtmf_gsm, this.sshconfig);\n            this.log.debug(`Delete file ${audiofile_guid_gsm}`);\n            fs.unlinkSync(audiofile_guid_gsm);\n        }\n        if (!this.config.ssh) {\n            const audiofile_dtmf_gsm = `${tools.addSlashToPath(this.config.path)}asterisk_dtmf.gsm`;\n            this.log.debug(`move ${audiofile_guid_gsm} ${audiofile_dtmf_gsm}`);\n            fs.renameSync(audiofile_guid_gsm, audiofile_dtmf_gsm);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new asterisk(options);\n} else {\n    // otherwise start the instance directly\n    (() => new asterisk())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,SAAoB;AACpB,uBAAiB;AACjB,iBAAgC;AAChC,YAAuB;AACvB,uBAAmC;AAkBnC,MAAM,iBAAiB,MAAM,QAAQ;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAED,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,cAAc;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,SAAK,UAAU,MAAM,SAAS,IAAI,MAAM,eAAe,YAAY,IAAI,MAAM,eAAe,OAAO;AACnG,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,gBAAgB,KAAK,eAAe,KAAK,IAAI,CAAC;AACtD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AAEnC,UAAM,KAAK,SAAS,mBAAmB,EAAE,KAAK,MAAM,KAAK,KAAK,CAAC;AAC/D,SAAK,gBAAgB,GAAG;AACxB,SAAK,IAAI;AAAA,MACL,oBAAoB,KAAK,SAAS,eAAe,KAAK,OAAO,oBACzD,KAAK,OAAO,UAChB,iBAAiB,KAAK,OAAO,QAAQ;AAAA,IACzC;AACA,SAAK,YAAY;AAAA,MACb,MAAM,KAAK,OAAO;AAAA,MAClB,UAAU,KAAK,OAAO;AAAA,MACtB,MAAM,KAAK,OAAO;AAAA,MAClB,UAAU,KAAK,OAAO;AAAA,MACtB,aAAa;AAAA,MACb,uBAAuB,CACnB,MACA,cACA,kBACA,SACA,WACC;AACD,YAAI,QAAQ,SAAS,KAAK,QAAQ,CAAC,EAAE,OAAO,YAAY,EAAE,SAAS,UAAU,GAAG;AAC5E,iBAAO,CAAC,KAAK,OAAO,WAAW,CAAC;AAAA,QACpC;AAAA,MACJ;AAAA,IACJ;AACA,QAAI;AACA,YAAM,KAAK,kBAAkB;AAC7B,YAAM,KAAK,WAAW;AACtB,YAAM,KAAK,cAAc;AAAA,IAC7B,SAAS,KAAK;AACV,WAAK,IAAI,MAAM,UAAU,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAAA,IACzD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,SAAS,UAAqC;AACxD,QAAI;AACA,WAAK,IAAI,KAAK,2CAA2C;AACzD,YAAM,KAAK,mBAAmB;AAC9B,YAAM,KAAK,SAAS,mBAAmB,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAChE,eAAS;AAAA,IACb,SAAS,KAAK;AACV,WAAK,IAAI,MAAM,UAAU,MAAM,gBAAgB,GAAG,CAAC,EAAE;AACrD,eAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAc,eAAe,IAAY,KAAwD;AAAA,EAGjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,cAAc,IAAY,OAAyD;AAxIrG;AAyIQ,QAAI,SAAS,CAAC,MAAM,KAAK;AACrB,YAAM,UAAU,GAAG,QAAQ,GAAG,KAAK,SAAS,KAAK,EAAE;AACnD,WAAK,IAAI,MAAM,6BAA6B,OAAO,KAAK,KAAK,UAAU,KAAK,CAAC,EAAE;AAC/E,UAAI,YAAY,iBAAiB;AAC7B,cAAM,SAAQ,iBAAM,KAAK,cAAc,aAAa,MAAtC,mBAA0C,QAA1C,mBAA+C,eAAc;AAC3E,cAAM,aAAY,iBAAM,KAAK,cAAc,iBAAiB,MAA1C,mBAA8C,QAA9C,mBAAmD,eAAc,KAAK,OAAO;AAC/F,YAAI;AACA,gBAAM,KAAK,iBAAiB,EAAE,MAAY,SAAmB,CAAC;AAC9D,gBAAM,KAAK,qBAAqB,iBAAiB,EAAE,KAAK,KAAK,CAAC;AAC9D,gBAAM,KAAK,qBAAqB,eAAe,EAAE,KAAK,KAAK,CAAC;AAC5D,gBAAM,KAAK,qBAAqB,mBAAmB,EAAE,KAAK,KAAK,CAAC;AAAA,QACpE,SAAS,KAAK;AACV,eAAK,IAAI,MAAM,2BAA2B,OAAO,MAAM,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAAA,QACvF;AAAA,MACJ;AACA,UAAI,YAAY,gBAAgB;AAC5B,cAAM,YAA2B;AAAA,UAC7B,YAAW,iBAAM,KAAK,cAAc,kBAAkB,MAA3C,mBAA+C,QAA/C,mBAAoD,eAAc;AAAA,UAC7E,QAAO,iBAAM,KAAK,cAAc,cAAc,MAAvC,mBAA2C,QAA3C,mBAAgD,eAAc;AAAA,UACrE,SAAQ,iBAAM,KAAK,cAAc,eAAe,MAAxC,mBAA4C,QAA5C,mBAAiD,eAAc;AAAA,UACvE,YAAW,iBAAM,KAAK,cAAc,kBAAkB,MAA3C,mBAA+C,QAA/C,mBAAoD,eAAc,KAAK,OAAO;AAAA,QAC7F;AACA,YAAI;AACA,gBAAM,KAAK,gBAAgB;AAC3B,gBAAM,KAAK,aAAa,SAAS;AACjC,gBAAM,KAAK,qBAAqB,gBAAgB,EAAE,KAAK,KAAK,CAAC;AAC7D,gBAAM,KAAK,qBAAqB,oBAAoB,EAAE,KAAK,KAAK,CAAC;AACjE,gBAAM,KAAK,qBAAqB,iBAAiB,EAAE,KAAK,KAAK,CAAC;AAC9D,gBAAM,KAAK,qBAAqB,gBAAgB,EAAE,KAAK,KAAK,CAAC;AAC7D,gBAAM,KAAK,qBAAqB,oBAAoB,EAAE,KAAK,KAAK,CAAC;AAAA,QACrE,SAAS,KAAK;AACV,eAAK,IAAI,MAAM,2BAA2B,OAAO,MAAM,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAAA,QACvF;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,UAAU,KAAsC;AApLlE;AAqLQ,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AACxC,cAAQ,IAAI,SAAS;AAAA,QACjB,KAAK,QAAQ;AACT,gBAAM,YAA2B,IAAI;AACrC,cAAI;AACA,kBAAM,KAAK,gBAAgB;AAC3B,kBAAM,SAAS,MAAM,KAAK,aAAa,SAAS;AAMhD,gBAAI,IAAI,UAAU;AACd,mBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,QAAgB,OAAO,OAAU,GAAG,IAAI,QAAQ;AAAA,YACzF;AAAA,UACJ,SAAS,KAAK;AACV,iBAAK;AAAA,cACD,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,EAAE,QAAQ,QAAW,OAAO,MAAM,gBAAgB,GAAG,EAAE;AAAA,cACvD,IAAI;AAAA,YACR;AACA,iBAAK,IAAI,MAAM,iCAAiC,IAAI,OAAO,KAAK,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAAA,UAChG;AACA;AAAA,QACJ;AAAA,QACA,KAAK,UAAU;AACX,gBAAM,aAAiB,SAAI,YAAJ,mBAAa;AACpC,gBAAM,aAAgC,SAAI,YAAJ,mBAAa;AACnD,cAAI;AACA,kBAAM,KAAK,gBAAgB;AAC3B,kBAAM,SAAS,MAAM,KAAK,eAAe,WAAW,SAAS;AAC7D,gBAAI,IAAI,UAAU;AACd,mBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,QAAgB,OAAO,OAAU,GAAG,IAAI,QAAQ;AAAA,YACzF;AAAA,UACJ,SAAS,KAAK;AACV,iBAAK;AAAA,cACD,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,EAAE,QAAQ,QAAW,OAAO,MAAM,gBAAgB,GAAG,EAAE;AAAA,cACvD,IAAI;AAAA,YACR;AACA,iBAAK,IAAI,MAAM,iCAAiC,IAAI,OAAO,KAAK,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAAA,UAChG;AACA;AAAA,QACJ;AAAA,QACA,KAAK,UAAU;AACX,gBAAM,YAAgC,IAAI;AAC1C,cAAI;AACA,kBAAM,YAAW,uCAAW,YAAW,uCAAW,WAAW,KAAK,OAAO;AACzE,kBAAM,OAAO,UAAU;AACvB,kBAAM,YAAY,UAAU;AAC5B,kBAAM,KAAK,iBAAiB,EAAE,MAAY,WAAsB,SAAmB,CAAC;AACpF,gBAAI,IAAI,UAAU;AACd,mBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,QAAQ,MAAM,OAAO,OAAU,GAAG,IAAI,QAAQ;AAAA,YACvF;AAAA,UACJ,SAAS,KAAK;AACV,iBAAK;AAAA,cACD,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,EAAE,QAAQ,OAAO,OAAO,MAAM,gBAAgB,GAAG,EAAE;AAAA,cACnD,IAAI;AAAA,YACR;AACA,iBAAK,IAAI,MAAM,iCAAiC,IAAI,OAAO,KAAK,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAAA,UAChG;AACA;AAAA,QACJ;AAAA,QACA;AACI,eAAK,IAAI,MAAM,mBAAmB,IAAI,OAAO,eAAe;AAC5D;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,aAA4B;AAlQ9C;AAmQQ,SAAK,IAAI,MAAM,qBAAqB;AACpC,UAAM,gBACD,iBAAM,KAAK,cAAc,aAAa,MAAtC,mBAA0C,QAA1C,mBAA+C,eAChD;AACJ,UAAM,iBACD,iBAAM,KAAK,cAAc,cAAc,MAAvC,mBAA2C,QAA3C,mBAAgD,eACjD;AACJ,UAAM,oBAAmB,iBAAM,KAAK,cAAc,iBAAiB,MAA1C,mBAA8C,QAA9C,mBAAmD,eAAc,KAAK,OAAO;AACtG,UAAM,qBACD,iBAAM,KAAK,cAAc,kBAAkB,MAA3C,mBAA+C,QAA/C,mBAAoD,eAAc,KAAK,OAAO;AACnF,UAAM,KAAK,qBAAqB,oBAAoB,EAAE,KAAK,kBAAkB,KAAK,KAAK,CAAC;AACxF,UAAM,KAAK,qBAAqB,mBAAmB,EAAE,KAAK,iBAAiB,KAAK,KAAK,CAAC;AACtF,UAAM,KAAK,qBAAqB,gBAAgB,EAAE,KAAK,cAAc,KAAK,KAAK,CAAC;AAChF,UAAM,KAAK,qBAAqB,eAAe,EAAE,KAAK,aAAa,KAAK,KAAK,CAAC;AAC9E,UAAM,KAAK,iBAAiB,EAAE,MAAM,aAAa,UAAU,gBAAgB,CAAC;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAc,eAAe,WAAgD;AACzE,SAAK,IAAI,MAAM,yBAAyB;AACxC,UAAM,UAAU,KAAK;AACrB,UAAM,OAAO,MAAM,QAAQ;AAC3B,UAAM,qBAAqB,GAAG,OAAO,SAAS,IAAI;AAClD,UAAM,WAAW,UAAU,WAAW,UAAU,WAAW,KAAK,OAAO;AACvE,QAAI,CAAC,UAAU,aAAa,CAAC,UAAU,MAAM;AACzC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD;AACA,QAAI,UAAU,aAAa,UAAU,MAAM;AACvC,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACtD;AACA,UAAM,YAAY,IAAI,oCAAmB;AAAA,MACrC,YAAY,KAAK,OAAO;AAAA,MACxB;AAAA,IACJ,CAAC;AACD,QAAI,UAAU,MAAM;AAChB,YAAM,UAAU,UAAU,UAAU,MAAM,kBAAkB;AAAA,IAChE;AACA,QAAI,UAAU,WAAW;AACrB,cAAQ,iBAAAA,QAAK,QAAQ,UAAU,SAAS,EAAE,YAAY,GAAG;AAAA,QACrD,KAAK;AACD,gBAAM,UAAU,SAAS,UAAU,WAAW,kBAAkB;AAChE;AAAA,QACJ,KAAK;AACD,aAAG,aAAa,UAAU,WAAW,kBAAkB;AACvD;AAAA,QACJ;AACI,gBAAM,IAAI,MAAM,aAAa,UAAU,SAAS,gCAAgC;AAAA,MACxF;AAAA,IACJ;AACA,QAAI,CAAC,GAAG,WAAW,kBAAkB,GAAG;AACpC,YAAM,IAAI,MAAM,2BAA2B,kBAAkB,EAAE;AAAA,IACnE;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,oBAAmC;AAC7C,SAAK,IAAI,MAAM,4BAA4B;AAC3C,QAAI,CAAC,KAAK,OAAO,aAAa;AAC1B;AAAA,IACJ;AACA,UAAM,SAAc,KAAK;AACzB,WAAO,iBAAiB,MAAM,OAAO,QAAQ,MAAM,CAAC,CAAC;AACrD,QAAI;AACA,iBAAW,QAAQ,KAAK,aAAa;AACjC,YAAI,CAAC,KAAK,WAAW,KAAK,OAAO,OAAO,KAAK,KAAK,MAAM,cAAc,GAAG;AACrE;AAAA,QACJ;AACA,cAAM,UAAU,KAAK;AACrB,cAAM,UAAU,MAAM,SAAS,IACzB,GAAG,KAAK,UAAU,eAAe,IAAI,KACrC,GAAG,KAAK,UAAU,aAAa,IAAI;AACzC,cAAM,UAAU,GAAG,OAAO,GAAG,KAAK,QAAQ,aAAa,EAAE,CAAC;AAC1D,aAAK,IAAI,MAAM,aAAa,OAAO,EAAE;AACrC,YAAI,aAAa,GAAG,aAAa,SAAS,EAAE,UAAU,OAAO,CAAC;AAC9D,mBAAW,KAAK,QAAQ;AACpB,gBAAM,SAAS,MAAM,CAAC;AACtB,gBAAM,QAAQ,OAAO,CAAC;AACtB,uBAAa,WAAW,MAAM,MAAM,EAAE,KAAK,KAAK;AAAA,QACpD;AACA,aAAK,IAAI,MAAM,qBAAqB,OAAO,EAAE;AAC7C,WAAG,cAAc,SAAS,YAAY,EAAE,UAAU,OAAO,CAAC;AAC1D,YAAI,KAAK,OAAO,KAAK;AACjB,eAAK,IAAI;AAAA,YACL,gCAAgC,OAAO,IAAI,KAAK,OAAO,OAAO,IAAI,KAAK,OAAO,EAAE,IAAI,OAAO;AAAA,UAC/F;AACA,gBAAM,MAAM,QAAQ,SAAS,SAAS,KAAK,SAAS;AACpD,eAAK,IAAI;AAAA,YACL,sBAAsB,OAAO,cAAc,KAAK,OAAO,EAAE;AAAA,UAC7D;AACA,eAAK,IAAI,MAAM,eAAe,OAAO,EAAE;AACvC,aAAG,WAAW,OAAO;AAAA,QACzB,OAAO;AACH,eAAK,IAAI;AAAA,YACL,sBAAsB,OAAO;AAAA,UACjC;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,KAAK,oBAAoB,kBAAkB,KAAK,SAAS,IAAI,EAAE,QAAQ,EAAE,aAAa,MAAM,EAAE,CAAC;AAAA,IACzG,SAAS,KAAK;AACV,WAAK,IAAI,MAAM,uCAAuC,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAAA,IACtF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAc,eAAe,WAAgB,WAA8C;AAjY/F;AAkYQ,SAAK,IAAI,MAAM,yBAAyB;AACxC,QAAI,GAAC,UAAK,aAAL,mBAAe,gBAAe;AAC/B,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAChD;AACA,UAAM,qBAAqB,MAAM,KAAK,eAAe;AAAA,MACjD,MAAM,uCAAW;AAAA,MACjB,WAAW,uCAAW;AAAA,MACtB,UAAU,uCAAW;AAAA,IACzB,CAAC;AACD,QAAI,KAAK,OAAO,KAAK;AACjB,YAAM,oBAAoB,MAAM,eAAe,KAAK,OAAO,IAAI,IAAI,iBAAAA,QAAK,SAAS,kBAAkB;AACnG,WAAK,IAAI,MAAM,OAAO,kBAAkB,IAAI,KAAK,OAAO,OAAO,IAAI,KAAK,OAAO,EAAE,IAAI,iBAAiB,EAAE;AACxG,YAAM,MAAM,QAAQ,oBAAoB,mBAAmB,KAAK,SAAS;AACzE,WAAK,IAAI,MAAM,eAAe,kBAAkB,EAAE;AAClD,SAAG,WAAW,kBAAkB;AAChC,UAAI,UAAU,UAAU;AACpB,kBAAU,SAAS,OAAO,MAAM,4BAA4B,iBAAiB;AAC7E,kBAAU,SAAS,MAAM;AAAA,MAC7B,OAAO;AACH,kBAAU,WAAW;AAAA,UACjB,MAAM,MAAM,4BAA4B,iBAAiB;AAAA,UACzD,KAAK;AAAA,QACT;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,CAAC,KAAK,OAAO,KAAK;AAClB,YAAM,sBAAsB,MAAM,eAAe,KAAK,OAAO,IAAI,IAAI,iBAAAA,QAAK,SAAS,kBAAkB;AACrG,WAAK,IAAI,MAAM,QAAQ,kBAAkB,IAAI,mBAAmB,EAAE;AAClE,SAAG,WAAW,oBAAoB,mBAAmB;AACrD,UAAI,UAAU,UAAU;AACpB,kBAAU,SAAS,OAAO,MAAM,4BAA4B,mBAAmB;AAC/E,kBAAU,SAAS,MAAM;AAAA,MAC7B,OAAO;AACH,kBAAU,WAAW;AAAA,UACjB,MAAM,MAAM,4BAA4B,mBAAmB;AAAA,UAC3D,KAAK;AAAA,QACT;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,IAAI,MAAM,YAAY,KAAK,UAAU,SAAS,CAAC,EAAE;AACtD,SAAK,IAAI,MAAM,aAAa;AAC5B,UAAM,SAAS,MAAM,KAAK,SAAS,YAAY,SAAS;AACxD,SAAK,IAAI,MAAM,gBAAgB,KAAK,UAAU,MAAM,CAAC,EAAE;AACvD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,aAAa,WAAwC;AArbvE;AAsbQ,SAAK,IAAI,MAAM,uBAAuB;AACtC,QAAI,GAAC,UAAK,aAAL,mBAAe,gBAAe;AAC/B,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAChD;AACA,UAAM,qBAAqB,MAAM,KAAK,eAAe;AAAA,MACjD,MAAM,uCAAW;AAAA,MACjB,WAAW,uCAAW;AAAA,MACtB,UAAU,uCAAW;AAAA,IACzB,CAAC;AACD,cAAU,WAAW,UAAU,WAAW,UAAU,WAAW,KAAK,OAAO;AAC3E,cAAU,YAAY,UAAU,YAAY,UAAU,YAAY,KAAK,OAAO;AAC9E,QAAI,KAAK,OAAO,KAAK;AACjB,YAAM,oBAAoB,MAAM,eAAe,KAAK,OAAO,IAAI,IAAI,iBAAAA,QAAK,SAAS,kBAAkB;AACnG,WAAK,IAAI,MAAM,OAAO,kBAAkB,IAAI,KAAK,OAAO,OAAO,IAAI,KAAK,OAAO,EAAE,IAAI,iBAAiB,EAAE;AACxG,YAAM,MAAM,QAAQ,oBAAoB,mBAAmB,KAAK,SAAS;AACzE,WAAK,IAAI,MAAM,eAAe,kBAAkB,EAAE;AAClD,SAAG,WAAW,kBAAkB;AAChC,gBAAU,YAAY,MAAM,4BAA4B,iBAAiB;AACzE,gBAAU,SAAS;AAAA,IACvB;AACA,QAAI,CAAC,KAAK,OAAO,KAAK;AAClB,YAAM,sBAAsB,MAAM,eAAe,KAAK,OAAO,IAAI,IAAI,iBAAAA,QAAK,SAAS,kBAAkB;AACrG,WAAK,IAAI,MAAM,QAAQ,kBAAkB,IAAI,mBAAmB,EAAE;AAClE,SAAG,WAAW,oBAAoB,mBAAmB;AACrD,gBAAU,YAAY,MAAM,4BAA4B,mBAAmB;AAC3E,gBAAU,SAAS;AAAA,IACvB;AACA,SAAK,IAAI,MAAM,YAAY,KAAK,UAAU,SAAS,CAAC,EAAE;AACtD,SAAK,IAAI,MAAM,aAAa;AAC5B,UAAM,SAAS,MAAM,KAAK,SAAS,UAAU,SAAS;AACtD,SAAK,IAAI,MAAM,gBAAgB,KAAK,UAAU,MAAM,CAAC,EAAE;AACvD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,gBAA+B;AACzC,QAAI;AACA,YAAM,QAAQ,MAAM,KAAK,gBAAgB;AACzC,UAAI,OAAO;AACP,cAAM,KAAK,mBAAmB;AAAA,MAClC;AAAA,IACJ,SAAS,KAAK;AACV,WAAK,IAAI,MAAM,UAAU,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAAA,IACzD;AACA,SAAK,iBAAiB,KAAK,WAAW,YAAY;AAC9C,YAAM,KAAK,cAAc;AAAA,IAC7B,GAAG,KAAK,GAAI;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,kBAAoC;AAC9C,QAAI,QAAQ;AACZ,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,IAAI,MAAM,qBAAqB;AACpC,WAAK,WAAW,IAAI,2BAAgB;AAAA,QAChC,MAAM,KAAK,OAAO;AAAA,QAClB,UAAU,KAAK,OAAO;AAAA,QACtB,UAAU,KAAK,OAAO;AAAA,QACtB,UAAU,KAAK,OAAO;AAAA,QACtB,SAAS,KAAK,OAAO;AAAA,MACzB,CAAC;AACD,cAAQ;AAAA,IACZ,OAAO;AACH,WAAK,IAAI,MAAM,uBAAuB;AACtC,UAAI;AACA,cAAM,KAAK,SAAS,eAAe;AAAA,MAEvC,SAAS,KAAK;AACV,aAAK,IAAI,MAAM,gEAAgE;AAC/E,YAAI;AACA,gBAAM,KAAK,mBAAmB;AAAA,QAElC,SAASC,MAAK;AAAA,QAEd;AACA,aAAK,WAAW,IAAI,2BAAgB;AAAA,UAChC,MAAM,KAAK,OAAO;AAAA,UAClB,UAAU,KAAK,OAAO;AAAA,UACtB,UAAU,KAAK,OAAO;AAAA,UACtB,UAAU,KAAK,OAAO;AAAA,UACtB,SAAS,KAAK,OAAO;AAAA,QACzB,CAAC;AACD,gBAAQ;AAAA,MACZ;AAAA,IACJ;AACA,QAAI,QAAQ;AACZ,WAAO,CAAC,KAAK,SAAS,YAAY,GAAG;AACjC;AACA,UAAI,QAAQ,KAAM;AACd,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACnD;AACA,YAAM,MAAM,KAAK,KAAK,GAAI;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,qBAAoC;AAC9C,QAAI,KAAK,UAAU;AACf,WAAK,IAAI,MAAM,6BAA6B;AAC5C,UAAI,KAAK,gBAAgB;AACrB,aAAK,aAAa,KAAK,cAAc;AAAA,MACzC;AACA,UAAI;AACA,cAAM,KAAK,SAAS,gBAAgB;AACpC,YAAI,QAAQ;AACZ,eAAO,KAAK,SAAS,YAAY,GAAG;AAChC;AACA,cAAI,QAAQ,KAAM;AACd,kBAAM,IAAI,MAAM,kCAAkC;AAAA,UACtD;AACA,gBAAM,MAAM,KAAK,KAAK,GAAI;AAAA,QAC9B;AAAA,MAEJ,SAAS,KAAK;AAAA,MAEd;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,qBAAoC;AAxjBtD;AAyjBQ,SAAK,IAAI,MAAM,6BAA6B;AAC5C,UAAM,OAA+B,CAAC;AACtC,eAAK,aAAL,mBAAe,GAAG,gBAAgB,OAAO,QAAa;AAClD,WAAK,IAAI,MAAM,qBAAqB,KAAK,UAAU,GAAG,CAAC,EAAE;AACzD,UAAI,IAAI,SAAS,YAAY,IAAI,UAAU;AACvC,mBAAW,KAAK,IAAI,UAAU;AAC1B,cAAI,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,EAAE,YAAY,IAAI,YAAY,KAAK,CAAC,EAAE,SAAS,IAAI,OAAO;AAC5E,iBAAK,CAAC,IAAI;AAAA,cACN,UAAU,IAAI;AAAA,cACd,OAAO,IAAI;AAAA,YACf;AACA,iBAAK,IAAI,MAAM,aAAa,CAAC,MAAM,IAAI,KAAK,EAAE;AAC9C,gBAAI,IAAI,WAAW,iBAAiB,KAAK,UAAU,IAAI,SAAS,IAAI;AAChE,oBAAM,KAAK,SAAS,mBAAmB,EAAE,KAAK,IAAI,aAAa,KAAK,KAAK,CAAC;AAC1E,oBAAM,KAAK,SAAS,eAAe,EAAE,KAAK,IAAI,OAAO,KAAK,KAAK,CAAC;AAAA,YACpE;AACA,gBAAI,IAAI,WAAW,gBAAgB,KAAK,UAAU,IAAI,SAAS,IAAI;AAC/D,oBAAM,KAAK,SAAS,gBAAgB,EAAE,KAAK,IAAI,OAAO,KAAK,KAAK,CAAC;AAAA,YACrE;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAc,iBAAiB,WAA8C;AACzE,SAAK,IAAI,MAAM,2BAA2B;AAC1C,UAAM,qBAAqB,MAAM,KAAK,eAAe,SAAS;AAC9D,QAAI,KAAK,OAAO,KAAK;AACjB,YAAM,qBAAqB,GAAG,MAAM,eAAe,KAAK,OAAO,IAAI,CAAC;AACpE,WAAK,IAAI,MAAM,OAAO,kBAAkB,IAAI,KAAK,OAAO,OAAO,IAAI,KAAK,OAAO,EAAE,IAAI,kBAAkB,EAAE;AACzG,YAAM,MAAM,QAAQ,oBAAoB,oBAAoB,KAAK,SAAS;AAC1E,WAAK,IAAI,MAAM,eAAe,kBAAkB,EAAE;AAClD,SAAG,WAAW,kBAAkB;AAAA,IACpC;AACA,QAAI,CAAC,KAAK,OAAO,KAAK;AAClB,YAAM,qBAAqB,GAAG,MAAM,eAAe,KAAK,OAAO,IAAI,CAAC;AACpE,WAAK,IAAI,MAAM,QAAQ,kBAAkB,IAAI,kBAAkB,EAAE;AACjE,SAAG,WAAW,oBAAoB,kBAAkB;AAAA,IACxD;AAAA,EACJ;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,SAAS,OAAO;AACjG,OAAO;AAEH,GAAC,MAAM,IAAI,SAAS,GAAG;AAC3B;",
  "names": ["path", "err"]
}
